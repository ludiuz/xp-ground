#!/bin/bash

# generated by chatgpt

# Default version of python
PYTHON_VERSION=3.11

# Check if create env and version arguments are provided and set the PYTHON_VERSION variable accordingly
if [[ $* == *--create-env* ]]; then
    for arg in "$@"
    do
        if [[ $arg == "--create-env" ]]; then
            SET_ENV=true
        else
            if [[ $arg == "--create-env="* ]]; then
                SET_ENV=true
                PYTHON_VERSION=${arg#--create-env=}
            else
                if [[ $arg == "--help" ]]; then
                    echo "Usage: ./setup.sh [--install] [--create-env=x.x]"
                    echo "Options:"
                    echo "  --install         Install required packages"
                    echo "  --create-env=x.x  Create virtual environment with specified Python version"
                    echo "  --help            Show help message"
                    exit 0
                else
                    echo "Unknown option: $arg"
                    exit 1
                fi
            fi
        fi
    done
else
    SET_ENV=false
fi

# Check if virtual environment exists, and create one if requested
if [[ $SET_ENV == true ]]; then
    if [ -d "env" ]; then
        read -p "Virtual environment already exists. Do you want to delete it and create a new one? (y/n) " choice
        case "$choice" in
            y|Y ) echo "Deleting virtual environment..."; rm -rf env;;
            n|N ) echo "Aborting..."; exit 1;;
            * ) echo "Invalid option"; exit 1;;
        esac
    fi
    echo "Creating virtual environment with Python $PYTHON_VERSION..."
    python$PYTHON_VERSION -m venv env
    INSTALL=true
else
    if [ ! -d "env" ]; then
        echo "Virtual environment not found. Run './setup.sh --create-env=x.x' to create one."
        exit 1
    fi
fi

# Parse command line arguments
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --install)
            INSTALL=true
            shift # past argument
            ;;
        --create-env*)
            # already handled above
            shift # past argument
            ;;
        *)    # unknown option
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Activate virtual environment
source env/bin/activate

# Install requirements if requested
if [ "$INSTALL" = true ]; then
    python -m pip install -r requirements.txt
    pip install --upgrade pip
fi

exec $SHELL
